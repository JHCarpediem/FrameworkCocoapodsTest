/*******************************************************************************
* Copyright (C), 2023~ , Lenkor Tech. Co., Ltd. All rights reserved.
* 文件说明 : 文档类标识
* 功能描述 : ArtiDiag900年检预审报告显示控件接口定义
* 创 建 人 : sujiya 20201210
* 实 现 人 :
* 审 核 人 : binchaolin
* 文件版本 : V1.00
* 修订记录 : 版本      修订人      修订日期      修订内容
*
*
*******************************************************************************/
#ifndef _ARTI_OBD_REVIEW_H_
#define _ARTI_OBD_REVIEW_H_

#include "StdInclude.h"
#include "StdShowMaco.h"


// 建议开发工程师在OBD年检预审报告编码前，参考产品经理给的UE/UI参考图

/*
    年检预审报告，用于国内车辆年检审核参考

    参考国标
    《汽油车污染物排放限值及测量方法（双怠速法及简易工况法）》（GB 18285―2018）
*/


class _STD_SHOW_DLL_API_ CArtiObdReview
{
public:
    /* 检测结果类型 */
    enum eResultType
    {
        RESULT_TYPE_PASS   = 1,         /* 检测合格 */
        RESULT_TYPE_FAILED = 2,         /* 检测不合格 */

        RESULT_TYPE_INVALID = 0xFF
    };

    enum eReadinessType
    {
        READINESS_TYPE_OK           = 1,         /* 就绪 */
        READINESS_TYPE_FAILED       = 2,         /* 不需要判断的，未就绪 */
        READINESS_TYPE_NOT_SUPOORT  = 3,         /* 不支持 */
        READINESS_TYPE_FAILED_EX    = 4,         /* 需要判断的，未就绪 */

        READINESS_TYPE_INVALID      = 0xFF
    };

public:
    CArtiObdReview();
#ifdef MULTI_SYSTEM
    CArtiObdReview(uint32_t thId);
#endif // MULTI_SYSTEM
    ~CArtiObdReview();


    /*-----------------------------------------------------------------------------
    *    功  能：初始化年检预审报告显示控件，同时设置标题文本
    * 
    *    参  数：strTitle 标题文本
    * 
    *    返回值：true 初始化成功 false 初始化失败
    -----------------------------------------------------------------------------*/
    bool InitTitle(const std::string& strTitle);



    /*-----------------------------------------------------------------------------
    *    功  能：设置OBD的通信协议类型
    *
    *    参  数：bCommOK,  与OBD诊断仪通讯情况
    *                      true     通信成功
    *                      false    通信不成功
    * 
    *            strProtocol，协议字符串
    *                         例如："ISO 15765-4(CAN)"
    *
    *    返回值：true 设置成功 false 设置失败
    -----------------------------------------------------------------------------*/
    bool SetProtocol(bool bCommOK, const std::string& strProtocol);



    /*-----------------------------------------------------------------------------
    *    功  能：设置年检预审的检测结果类型
    *
    *    参  数：eResult，  检测是否合格
    *                       RESULT_TYPE_PASS        检测合格
    *                       RESULT_TYPE_FAILED      检测不合格
    *
    *    返回值：无
    -----------------------------------------------------------------------------*/
    void SetReportResult(eResultType eResult);



    /*-----------------------------------------------------------------------------
    *    功  能：设置年检预审的复检结果类型
    *
    *    参  数：eResult，  检测是否合格
    *                       RESULT_TYPE_PASS        检测合格
    *                       RESULT_TYPE_FAILED      检测不合格
    *
    *    返回值：无
    -----------------------------------------------------------------------------*/
    void SetReCheckResult(eResultType eResult);



    /*-----------------------------------------------------------------------------
    *    功  能：设置是否需要复检
    *
    *    参  数：isNeed，       是否需要复检
    *            strReCheck     如果需要复检，复检内容       
    *
    *    返回值：无
    -----------------------------------------------------------------------------*/
    void SetNeedReCheck(bool isNeed, const std::string& strReCheck);



    /*-----------------------------------------------------------------------------
    *    功  能：设置OBD系统故障指示器状态
    *
    *    参  数：bMILStatus,  OBD系统故障指示器状态
    *                      true     OBD系统故障指示器点亮
    *                      false    OBD系统故障指示器熄灭
    *
    *    返回值：无
    -----------------------------------------------------------------------------*/
    void SetMILStatus(bool bMILStatus);


    /*-----------------------------------------------------------------------------
    *    功  能：设置“OBD故障指示器”结果类型
    *
    *    参  数：eResult，  是否合格
    *                       RESULT_TYPE_PASS        合格
    *                       RESULT_TYPE_FAILED      不合格
    *
    *    返回值：无
    -----------------------------------------------------------------------------*/
    void SetObdStatus(eResultType eResult);


    /*-----------------------------------------------------------------------------
    *    功  能：设置故障灯亮后行驶里程数（KM）
    *
    *    参  数：strMILOnMileage   故障灯亮后的行驶里程，单位为KM
    *
    *    返回值：无
    -----------------------------------------------------------------------------*/
    void SetMILOnMileage(const std::string& strMILOnMileage);


    /*-----------------------------------------------------------------------------
    *    功  能：添加诊断就绪状态未完成主类型项目
    *
    *    参  数：strName       名称，例如："发动机($7E8)"
    *
    *    返回值：无
    -----------------------------------------------------------------------------*/
    void AddReadinessMainType(const std::string& strName);


    /*-----------------------------------------------------------------------------
    *    功  能：添加诊断就绪状态未完成项目
    *
    *    参  数：strName       名称，例如："氧传感器检测 - 发动机($7E8)"
    *            strStatus     状态，例如："未就绪"
    *
    *    返回值：无
    -----------------------------------------------------------------------------*/
    void AddReadinessStatusItems(const std::string& strName, eReadinessType typeReadiness);



    /*-----------------------------------------------------------------------------
    *    功  能：添加车辆控制单元的CALID（如果适用）和CVN信息（如果适用）
    * 
    *            CALID --   Calibration ID                       -- 软件标定识别
    *            CVN   --   Calibration Verification Number      -- 标定验证码
    *                       
    *
    *    参  数：strName       车辆控制单元名称，例如："发动机控制单元"
    *            vctCALID      对应ECU的软件标定识别(CALID)数组
    *            vctCVN        对应ECU的标定验证码(CVN)数组
    *
    *    返回值：无
    -----------------------------------------------------------------------------*/
    void AddEcuInfoItems(const std::string& strName, const std::vector<std::string>& vctCALID, const std::vector<std::string>& vctCVN);



    /*-----------------------------------------------------------------------------
    *    功  能：添加故障码列表项
    *
    *    参  数：dtcItem    故障码列表项， 参考stDtcNodeEx的定义
    *            dtcItem 节点 结构定义
    *            struct stDtcNodeEx
    *            {
    *                std::string strCode;        // 故障代码
    *                std::string strDescription; // 故障码描述
    *                std::string strStatus;      // 故障码状态
    *                uint32_t    uStatus;        // 故障码状态
    *            };
    *
    *    返回值：无
    *
    *    说  明：故障码项
    -----------------------------------------------------------------------------*/
    void AddDtcItem(const stDtcNodeEx& dtcItem);



    /*-----------------------------------------------------------------------------
    *    功  能：添加故障码列表
    *
    *    参  数：vctItem        故障码列表项数组， 参考stDtcNodeEx的定义

    *    返回值：无
    *
    *    说  明：故障码数组
    -----------------------------------------------------------------------------*/
    void AddDtcItems(const std::vector<stDtcNodeEx>& vctItem);


    /*-----------------------------------------------------------------------------
    *    功  能：添加数据流列表项的主类型
    *
    *    参  数：strName    数据流列表项的主类型
    *
    *    返回值：无
    *
    *    说  明：
    -----------------------------------------------------------------------------*/
    void AddLiveDataMainType(const std::string& strName);


    /*-----------------------------------------------------------------------------
    *    功  能：添加数据流列表项
    *
    *    参  数：dsItem    数据流列表项， 参考stDsReportItem的定义
    *
    *    返回值：无
    *
    *    说  明：
    -----------------------------------------------------------------------------*/
    void AddLiveDataItem(stDsReportItem& dsItem);



    /*-----------------------------------------------------------------------------
    *    功  能：添加数据流列表
    *
    *    参  数：dsItem    数据流列表项数组， 参考stDsReportItem的定义
    *
    *    返回值：无
    *
    *    说  明：
    -----------------------------------------------------------------------------*/
    void AddLiveDataItems(const std::vector<stDsReportItem>& vctItem);


    /*-----------------------------------------------------------------------------
    *    功  能：添加车载排放诊断系统实际监测频率 (IUPR状态)的主类型
    *
    *    参  数：strName        名称，例如，"$7E8 发动机"
    *
    *    返回值：无
    *
    *    说  明：
    -----------------------------------------------------------------------------*/
    void AddIUPRMainType(const std::string& strName);


    /*-----------------------------------------------------------------------------
    *    功  能：添加车载排放诊断系统实际监测频率 (IUPR状态)
    *            IUPR相关数据
    *
    *    参  数：strName        名称，例如，"催化器组1在用监测频率"
    *            strStatus      状态
    *
    *    返回值：无
    *
    *    说  明：
    -----------------------------------------------------------------------------*/
    void AddIUPRStatusItem(const string& strName, const string& strStatus);



    /*-----------------------------------------------------------------------------
    功能：设置车辆发动机信息

    参数说明：
            strInfo                发动机机信息，例如，"F62-D52"
            strSubType             发动机子型号或者其它信息，例如，"N542"

    返回值：
    -----------------------------------------------------------------------------*/
    void SetEngineInfo(const std::string& strInfo, const std::string& strSubType);



    /*-----------------------------------------------------------------------------
    *    功  能：显示年检预审报告
    * 
    *    参  数：无
    * 
    *    返回值：uint32_t 组件界面按键返回值
    *    按键：返回
    -----------------------------------------------------------------------------*/
    uint32_t Show();

private:
    void*        m_pData;
};


#endif //_ARTI_OBD_REVIEW_H_
